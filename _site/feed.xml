<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-01-20T21:18:37+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">HyunDev</title><subtitle>화면 개발이 즐거운 개발자</subtitle><author><name>GitHub User</name></author><entry><title type="html">깊이우선탐색, 프로그래머스 타켓넘버</title><link href="http://localhost:4000/%ED%83%80%EC%BC%93%EB%84%98%EB%B2%84/" rel="alternate" type="text/html" title="깊이우선탐색, 프로그래머스 타켓넘버" /><published>2024-01-20T00:00:00+09:00</published><updated>2024-01-20T00:00:00+09:00</updated><id>http://localhost:4000/%ED%83%80%EC%BC%93%EB%84%98%EB%B2%84</id><content type="html" xml:base="http://localhost:4000/%ED%83%80%EC%BC%93%EB%84%98%EB%B2%84/">&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/43165&quot;&gt;문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;문제-내용&quot;&gt;문제 내용&lt;/h3&gt;

&lt;p&gt;n개의 음이 아닌 정수들이 있습니다. 
이 정수들을 순서를 바꾸지 않고 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다. 
예를 들어 [1, 1, 1, 1, 1]로 숫자 3을 만들려면 다음 다섯 방법을 쓸 수 있습니다.&lt;/p&gt;

&lt;p&gt;-1+1+1+1+1 = 3&lt;br /&gt;
+1-1+1+1+1 = 3&lt;br /&gt;
+1+1-1+1+1 = 3&lt;br /&gt;
+1+1+1-1+1 = 3&lt;br /&gt;
+1+1+1+1-1 = 3&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사용할 수 있는 숫자가 담긴 배열 numbers, 타겟 넘버 target이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를 return 하도록 solution 함수를 작성해주세요.&lt;/p&gt;

&lt;p&gt;제한사항
주어지는 숫자의 개수는 2개 이상 20개 이하입니다.
각 숫자는 1 이상 50 이하인 자연수입니다.
타겟 넘버는 1 이상 1000 이하인 자연수입니다.
입출력 예
numbers	        target	return
[1, 1, 1, 1, 1]	3	    5
[4, 1, 2, 1]	4	    2&lt;/p&gt;

&lt;h3 id=&quot;풀이방법&quot;&gt;풀이방법&lt;/h3&gt;

&lt;p&gt;이문제의 경우의수를 따지는 방법은 각 숫자를 더할 껀지 뺄껀지를 선택하는 것이다.
깊이우선탐색의 기본적인 구현 방법인 재귀를 이용해서 각 숫자를 더하는 것부터 시작해서 빼는 것도 계산하고
모든 계산이 끝났을 때 target Number가 되었는지를 카운트 해주면 된다고 생각했다.&lt;/p&gt;

&lt;p&gt;코드는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkTargetNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;nx&quot;&gt;checkTargetNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;checkTargetNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;checkTargetNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>GitHub User</name></author><category term="알고리즘" /><category term="알고리즘" /><category term="깊이우선탐색" /><category term="DFS" /><summary type="html">문제 링크</summary></entry><entry><title type="html">Git 블로그 정착기</title><link href="http://localhost:4000/Git-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%A0%95%EC%B0%A9%EA%B8%B0/" rel="alternate" type="text/html" title="Git 블로그 정착기" /><published>2023-11-18T00:00:00+09:00</published><updated>2023-11-18T00:00:00+09:00</updated><id>http://localhost:4000/Git%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EC%A0%95%EC%B0%A9%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/Git-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%A0%95%EC%B0%A9%EA%B8%B0/">&lt;h2 id=&quot;다시-git-io&quot;&gt;다시 Git IO…&lt;/h2&gt;
&lt;p&gt;계획 없는 퇴사를 하고 취업을 하기 위해서 포트폴리오, 이력서가 필요했는데 그 과정에서 포트폴리오와 이력서를 어디에 작성할 것인가에 대한 고민이 너무 많았다.
notion, 구직 사이트에 작성, pdf 파일로 작성 등등… 인터넷에 돌아다니는 잘 작성했다는 프론트엔드 이력서들을 보고 이력서는 github.io에 작성하는 것이 좋을 거 같다는 결론을 내렸다.
그래서 예전에 대학교때 쓰던 github io에 들어갔는데 내가 쓰고 싶은 기능들이 부족해서 하나하나 만들기 시작하다가 해당 theme가 제공하는 css를 모두 고치기에는 블로그를 만드는데 너무 많은 시간을 쓰는 것이 아까웠다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hyundev.github.io/assets/images/github-multi.png&quot; alt=&quot;my-image&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:center&quot;&gt;마음에 드는 테마를 찾지 못해 계속 바꾼 흔적들 ㅠㅠ&lt;/p&gt;

&lt;p&gt;그런데 내가 쓰고 싶은 기능들… 정말 심플한 기능인데도… 딱 맘에 드는 jekyll theme를 찾기 어려웠다. 그렇게 원하는 것을 못찾아서 제일 그나마 가까운 theme로 다시 기능 구현을 하다가 오류 해결할려고 검색하던 차에 
정말 딱 맘에 드는 github.io 사이트를 봤다. 이거다 하고 다시 처음 부터 구축 시작 했다… 그리고 지금은 너무 만족~ ㅎㅎㅎ
댓글하고 방문자수 기능은 따로 없어서 추가했다.&lt;/p&gt;

&lt;h2 id=&quot;다시-블로그&quot;&gt;다시 블로그&lt;/h2&gt;
&lt;p&gt;블로그에 대한 나의 생각은 개발자로서 무언가 기술을 쓸 때 정리를 하는 용도로 사용한다는 정도 였는데, 정리라는 게 깔끔하게 하기도 어렵고 매일 매일 새로운 기술을 찾아서 쓰는데 그 모든 걸 정리하기가 너무 힘들어 포기하고
노션에 내가 보기 편한 형태로 메모하는 것으로 굳어졌었다.
그런데 요즘 부업이나 파이프라인에 관심을 가지게 되면서 브랜딩을 하거나 마케팅을 하는 용도로 블로그, SNS를 사용하는 것을 보고 다시 블로그 뽐뿌가 강하게 왔다. ㅎㅎㅎ
블로그를 하기로 맘 먹으면서 티스토리, 네이버 블로그, 워드프로세스 등 다양한 방법이 있었지만 github io를 선택했다.
웹개발자로서 내가 원하는 데로 수정하기가 제일 용이할거 같아서다.&lt;/p&gt;</content><author><name>HyunDev</name></author><category term="블로그" /><category term="블로그" /><category term="브랜딩" /><category term="개발자의삶" /><summary type="html">다시 Git IO… 계획 없는 퇴사를 하고 취업을 하기 위해서 포트폴리오, 이력서가 필요했는데 그 과정에서 포트폴리오와 이력서를 어디에 작성할 것인가에 대한 고민이 너무 많았다. notion, 구직 사이트에 작성, pdf 파일로 작성 등등… 인터넷에 돌아다니는 잘 작성했다는 프론트엔드 이력서들을 보고 이력서는 github.io에 작성하는 것이 좋을 거 같다는 결론을 내렸다. 그래서 예전에 대학교때 쓰던 github io에 들어갔는데 내가 쓰고 싶은 기능들이 부족해서 하나하나 만들기 시작하다가 해당 theme가 제공하는 css를 모두 고치기에는 블로그를 만드는데 너무 많은 시간을 쓰는 것이 아까웠다.</summary></entry><entry><title type="html">Unity Animation image 반복효과 코드로 구현하기</title><link href="http://localhost:4000/Unity-Animation-code/" rel="alternate" type="text/html" title="Unity Animation image 반복효과 코드로 구현하기" /><published>2023-11-05T00:00:00+09:00</published><updated>2023-11-05T00:00:00+09:00</updated><id>http://localhost:4000/Unity-Animation-code</id><content type="html" xml:base="http://localhost:4000/Unity-Animation-code/">&lt;h2 id=&quot;구현-내용-설명&quot;&gt;구현 내용 설명&lt;/h2&gt;
&lt;p&gt;unity로 게임 만들기를 하면서 이미지를 단순하게 반복해서 보여주는 ui 동작이 필요했다.
unity는 코드를 사용하지 않고 애니메이션 동작을 만들고 해당 동작에 관련된 여려가지 기능을 제공했는데
아래의 gif 처럼 동작하면서 원하는 시간만큼 애니메이션을 보여주고 마지막 결과를 동기화를 맞춰서 하는 게 도저히 안되서 완전히 코드로 짜보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hyundev.github.io/assets/images/rock_paper_anim.gif&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;코드-설명&quot;&gt;코드 설명&lt;/h2&gt;
&lt;p&gt;이미지 순환의 반복 작업을 수행하기 위해 코루틴을 사용했다.
Image_1, Image_2, Image_3 은 각각 가위, 바위, 보 jpg 파일이다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 이미지 animation 시작&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;StartCoroutine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startComImageAnim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 특정 이미지로 변경&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setComImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;objComImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Image_&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sprite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;IEnumerator&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;startComImageAnim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 애니메이션 수행 시간&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changeTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 애니메이션을 수행하면서 보여줄 이미지 index 번호&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curOrder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changeTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;changeTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setComImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curOrder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;curOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 0.2초 대기 후 애니메이션 종료&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WaitForSeconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 최종 이미지 세팅&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setComImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>GitHub User</name></author><category term="Unity" /><category term="Unity" /><category term="Animation" /><category term="Image repeat" /><summary type="html">구현 내용 설명 unity로 게임 만들기를 하면서 이미지를 단순하게 반복해서 보여주는 ui 동작이 필요했다. unity는 코드를 사용하지 않고 애니메이션 동작을 만들고 해당 동작에 관련된 여려가지 기능을 제공했는데 아래의 gif 처럼 동작하면서 원하는 시간만큼 애니메이션을 보여주고 마지막 결과를 동기화를 맞춰서 하는 게 도저히 안되서 완전히 코드로 짜보았다.</summary></entry><entry><title type="html">React Native 개발기(1)</title><link href="http://localhost:4000/ReactNative-%EA%B0%9C%EB%B0%9C%EA%B8%B0/" rel="alternate" type="text/html" title="React Native 개발기(1)" /><published>2023-11-04T00:00:00+09:00</published><updated>2023-11-04T00:00:00+09:00</updated><id>http://localhost:4000/ReactNative-%EA%B0%9C%EB%B0%9C%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/ReactNative-%EA%B0%9C%EB%B0%9C%EA%B8%B0/">&lt;h2 id=&quot;개발환경-설정&quot;&gt;개발환경 설정&lt;/h2&gt;

&lt;p&gt;개발을 하기 위해서는 개발환경을 먼저 설정해야 한다. 
chat gpt에 react native 개발환경 설정을 알려달라고 해봤다.
아주 자세히 잘 알려준다. 그런데 그대로 했더니 안된다;;;
알고 봤더니 mac m1 cpu에서는 개발환경을 설정하는 방법이 다른 거 였다.
google에 검색해서 다시 해보았다.
&lt;strong&gt;mac으로 개발환경을 설정 하는 경우 intel, m1, m2 cpu별로 개발환경 설정이 다르니 주의가 필요하다.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;라이브러리-사용&quot;&gt;라이브러리 사용&lt;/h2&gt;

&lt;p&gt;React Native를 혼자 개발하다 보면 직접 개발하기보다는 라이브러리를 사용하는 것이 성능이 더 좋아서 라이브러리를 사용하게 된다. 그런데 React Native는 라이브러리가 개발되면서 서로 다른 버전으로 인해 충돌이 발생하는 경우가 많아서 라이브러리를 사용하다가 안되면 다른 라이브러리로 대체하거나 하는 등 라이브러리를 지우는 일이 너무 많았다. 그래서 이번에는 라이브러리를 지우는 방법을 정리해봤다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;실행 중인 에뮬레이터(android, ios)를 종료한다.&lt;/li&gt;
  &lt;li&gt;실행 중인 terminal을 모두 종료한다.&lt;/li&gt;
  &lt;li&gt;package-lock.json을 지운다.&lt;/li&gt;
  &lt;li&gt;node_modules를 지운다.&lt;/li&gt;
  &lt;li&gt;package.json 에서 사용하지 않는 라이브러리를 지우고 새로 사용할 라이브러리를 추가한다.&lt;/li&gt;
  &lt;li&gt;아래 명령어를 실행해 새로 설정한 라이브러리를 설치한다.
    &lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;npm i
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;cd ios &amp;amp;&amp;amp; pod install  ios 라이브러리를 설치한다.
    &lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;cd ios &amp;amp;&amp;amp; pod install
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;npx react-native start –reset-cache 로 다시 react-native를 실행한다.
    &lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;npx react-native start --reset-cache
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위 과정을 개발 하면서 정말 자주 하는 것 같다…&lt;/p&gt;</content><author><name>GitHub User</name></author><category term="React Native" /><category term="React Native" /><category term="Android Develop" /><category term="IOS Develop" /><summary type="html">개발환경 설정</summary></entry><entry><title type="html">부자의 그릇을 읽고…</title><link href="http://localhost:4000/%EB%B6%80%EC%9E%90%EC%9D%98%EA%B7%B8%EB%A6%87/" rel="alternate" type="text/html" title="부자의 그릇을 읽고…" /><published>2023-11-04T00:00:00+09:00</published><updated>2023-11-04T00:00:00+09:00</updated><id>http://localhost:4000/%EB%B6%80%EC%9E%90%EC%9D%98%EA%B7%B8%EB%A6%87</id><content type="html" xml:base="http://localhost:4000/%EB%B6%80%EC%9E%90%EC%9D%98%EA%B7%B8%EB%A6%87/">&lt;p&gt;&lt;img src=&quot;https://hyundev.github.io/assets/images/부자의그릇_cover.jpeg&quot; alt=&quot;my-image&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;저자:이즈미 마사토&lt;/p&gt;

&lt;h2 id=&quot;읽게된-동기&quot;&gt;읽게된 동기&lt;/h2&gt;
&lt;p&gt;퇴사 후에 조금이라도 돈을 벌 수 있는 파이프라인을 구축하는 것에 관심을 많이 같게 되었고 자연스레 돈에 관련한 책을 자주 읽게 되었다.&lt;/p&gt;

&lt;p&gt;요즘은 밀리의서재를 구독해서 책을 읽고 있는데 돈에 관련된 책 중에 감동을 받았다는 후기를 보게 되었다. 이런 분야의 책을 읽고는 감동을 받기는 어려운데 어떤 내용이지 하는 호기심에 읽기 시작했다. 짧은 내용의 소설 형식으로 되어 있어 한번에 다 읽어 버렸다. 그리고 책의 제목에서 그릇이라는 단어와 상통하는 깨달음을 얻었다.&lt;/p&gt;

&lt;h2 id=&quot;책-줄거리&quot;&gt;책 줄거리&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;약스포주의&lt;/strong&gt;&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;토글 접기/펼치기&lt;/summary&gt;
&lt;div&gt;
    &lt;p&gt;이 책은 주인공이 굶주린 밤에 자판기에서 음료를 뽑을 돈도 없어서 벤치에 서성이면서 시작된다. 그리고 주인공 앞에 어떤 할아버지가 나타나고 음료를 뽑을 돈을 빌려주면서 할아버지가 돈에 관련된 질문을 던지면서 둘의 대화가 시작된다.&lt;/p&gt;

    &lt;p&gt;주인공은 자신이 어떤 일을 했고 중간에 성공을 했지만 무리하게 더 많은 것을 욕심내다가 망하게 된 것들을 이야기 한다. 할아버지는 돈을 가지고 있는 사람이 그 돈을 관리할 수 있는 능력이 없다면 돈은 스쳐 지나갈 뿐이라고 한다. 여기서 돈을 버는 것도 중요하지만 자신이 그 돈을 소화할 만한 그릇이 되었는지도 중요하다는 것을 알 수 있었다. 돈은 계속 흘러가는 것이기 때문에 자신이 관리할 수 있는 만큼의 돈이 아니라면 결국 사라지게 된다는 것이다. 나는 계속 부자가 되고 싶어 했지만 내가 그만큼의 돈을 관리할 능력이 되는지는 생각해보지 않았었다. 만약 내가 큰돈을 벌게 된다고 해도 그 돈을 관리할 수 있는 능력이 없다면 결국에 그 돈도 나를 스쳐지나갈 것이다. 진정한 부자란 큰 돈을 관리할 능력을 가지고 있어서 돈이 자연스럽게 부자에게 흘러들어 올 수도 있겠구나라는 생각이 들었다. 돈을 버는 것도 중요하지만 돈에 대해서 어떤 마음가짐을 가져야 하는지 이제까지 생각했던 방향과 다른 방향으로 생각해볼 수 있었다.&lt;/p&gt;

    &lt;p&gt;그리고 이야기 후에는 할아버지가 어떤 이유로 주인공에게 말을 걸었는지와 해피엔딩의 결말을 보여준다.&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;h2 id=&quot;후기&quot;&gt;후기&lt;/h2&gt;
&lt;p&gt;단순히 돈을 버는 것보다 이 돈을 관리할 수 있는 그릇이 되는 것도 중요하다는 것을 알았다. 그렇지 않다면 돈을 벌어도 돈은 금방 나를 스쳐 지나 갈 것이다. 돈에 대한 깨달음과 소설 구성으로 되어 있어 감동이 있는 이야기도 읽을 수 있어 좋은 책이었다.&lt;/p&gt;</content><author><name>GitHub User</name></author><category term="독서" /><category term="경제학" /><category term="경영학" /><category term="경제경영학" /><category term="돈" /><category term="부자" /><category term="부자학" /><summary type="html"></summary></entry></feed>